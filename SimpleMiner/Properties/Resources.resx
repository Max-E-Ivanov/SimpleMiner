<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Caption" xml:space="preserve">
    <value>SimpleMiner</value>
  </data>
  <data name="CloseButton" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="ErrorCaption" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="EthCreateWalletLink" xml:space="preserve">
    <value>Create ethWallet</value>
  </data>
  <data name="EthPool" xml:space="preserve">
    <value>EthPool</value>
  </data>
  <data name="EthWallet" xml:space="preserve">
    <value>EthWallet</value>
  </data>
  <data name="EthWorker" xml:space="preserve">
    <value>Worker</value>
  </data>
  <data name="HideDetailsButton" xml:space="preserve">
    <value>Hide details</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="IcoMiningLogo" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\IcoMiningLogo.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="MailTo" xml:space="preserve">
    <value>simpleminer@gmail.com</value>
  </data>
  <data name="MiningLogo" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\MiningLogo.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ShowDetailsButton" xml:space="preserve">
    <value>Show details</value>
  </data>
  <data name="s_error" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\s_error.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="s_settings" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\s_settings.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="s_start" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\s_start.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="s_stop" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\s_stop.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tabAbout" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="tabEthereum" xml:space="preserve">
    <value>Ethereum</value>
  </data>
  <data name="tabOptions" xml:space="preserve">
    <value>Setting</value>
  </data>
  <data name="ttConfigButton" xml:space="preserve">
    <value>Extended parameters</value>
  </data>
  <data name="ttErrorClose" xml:space="preserve">
    <value>Press to close error dialog</value>
  </data>
  <data name="ttErrorDetails" xml:space="preserve">
    <value>Press to show additional details</value>
  </data>
  <data name="ttEthPool" xml:space="preserve">
    <value>Pool address for Ethereum mining</value>
  </data>
  <data name="ttEthWallet" xml:space="preserve">
    <value>Address of your Ethereum wallet</value>
  </data>
  <data name="ttEthWorker" xml:space="preserve">
    <value>Worker name</value>
  </data>
  <data name="ttStartButton" xml:space="preserve">
    <value>Press for start mining</value>
  </data>
  <data name="ttStopButton" xml:space="preserve">
    <value>Press fro stop mining</value>
  </data>
  <data name="Web" xml:space="preserve">
    <value>http://www.google.com</value>
  </data>
  <data name="ClmCfgCustomCommandBtn" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="ClmCFgCustomCommandCb" xml:space="preserve">
    <value>Custom command</value>
  </data>
  <data name="ClmCfgTabCustomCommand" xml:space="preserve">
    <value>Custom command</value>
  </data>
  <data name="MinerCfgCaption" xml:space="preserve">
    <value>Miner parameters</value>
  </data>
  <data name="ttClmCfgCustomCommandBtn" xml:space="preserve">
    <value>Generate command for miner</value>
  </data>
  <data name="ttClmCFgCustomCommandCb" xml:space="preserve">
    <value>Use custom command for miner. In this mode other settings are ignored</value>
  </data>
  <data name="ApplayButton" xml:space="preserve">
    <value>Applay</value>
  </data>
  <data name="CancelButton" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="DefaultsButton" xml:space="preserve">
    <value>Restore defaults</value>
  </data>
  <data name="ttApplayButton" xml:space="preserve">
    <value>Applay changes and close form</value>
  </data>
  <data name="ttCancelButton" xml:space="preserve">
    <value>Cancel changes and close form</value>
  </data>
  <data name="ttDefaultsButton" xml:space="preserve">
    <value>Restore default settings</value>
  </data>
  <data name="ClmCfgSecondCoin" xml:space="preserve">
    <value>Mine Second coin</value>
  </data>
  <data name="ClmCfgTabCoins" xml:space="preserve">
    <value>Coins</value>
  </data>
  <data name="ttClmCfgAllcoins" xml:space="preserve">
    <value>Check to be able to mine Ethereum forks, in this mode miner will use some default pools for devfee Ethereum mining</value>
  </data>
  <data name="ttClmCfgAllPools" xml:space="preserve">
    <value>Check if miner does not want to mine on specified pool (because it cannot mine devfee on that pool), but you agree to use some default pools for devfee mining</value>
  </data>
  <data name="ttClmCfgDcoin" xml:space="preserve">
    <value>Select second coin to mine in dual mode</value>
  </data>
  <data name="ttClmCfgDcri" xml:space="preserve">
    <value>Decred/Siacoin/Lbry/Pascal intensity, or Ethereum fine-tuning value in ETH-only ASM mode. Default value is 30, you can adjust this value to get the best Decred/Siacoin/Lbry mining speed without reducing Ethereum mining speed. 
   You can also specify values for every card, for example "30,100,50"</value>
  </data>
  <data name="ttClmCfgDcrt" xml:space="preserve">
    <value>Time period between Decred/Siacoin HTTP requests for new job, in seconds. Default value is 5 seconds</value>
  </data>
  <data name="ttClmCfgDpool" xml:space="preserve">
    <value>Decred/Siacoin/Lbry/Pascal pool address. Use "http://" prefix for HTTP pools, "stratum+tcp://" for Stratum pools. If prefix is missed, Stratum is assumed.
   Decred: both Stratum and HTTP are supported. Siacoin: both Stratum and HTTP are supported, though note that not all Stratum versions are supported currently. Lbry: only Stratum is supported</value>
  </data>
  <data name="ttClmCfgDpsw" xml:space="preserve">
    <value>Password for Decred/Siacoin/Lbry/Pascal pool</value>
  </data>
  <data name="ttClmCfgDwal" xml:space="preserve">
    <value>Your Decred/Siacoin/Lbry/Pascal wallet address or worker name, it depends on pool</value>
  </data>
  <data name="ttClmCfgErate" xml:space="preserve">
    <value>Send Ethereum hashrate to pool</value>
  </data>
  <data name="ttClmCfgEsm" xml:space="preserve">
    <value>Ethereum Stratum mode</value>
  </data>
  <data name="ttClmCfgEstale" xml:space="preserve">
    <value>Send Ethereum stale shares to pool, it can increase effective hashrate a bit</value>
  </data>
  <data name="ttClmCfgEtha" xml:space="preserve">
    <value>Ethereum algorithm mode for AMD cards. 0 - optimized for fast cards, 1 - optimized for slow cards, 2 - for gpu-pro Linux drivers. -1 - autodetect (default, automatically selects between 0 and 1). 
   You can also set this option for every card individually, for example "-etha 0,1,0"</value>
  </data>
  <data name="ttClmCfgEthi" xml:space="preserve">
    <value>Ethereum intensity. Default value is 8, you can decrease this value if you don't want Windows to freeze or if you have problems with stability. The most low GPU load is "-ethi 0".
   Also "-ethi" now can set intensity for every card individually, for example " 1,8,6"</value>
  </data>
  <data name="ttClmCfgPsw" xml:space="preserve">
    <value>Password for Ethereum pool, use "x" as password</value>
  </data>
  <data name="ttClmCfgSolo" xml:space="preserve">
    <value>Use SOLO mode</value>
  </data>
  <data name="ttClmCfgWorker" xml:space="preserve">
    <value>Worker name, it is required for some pools</value>
  </data>
  <data name="ttClmCfgEtht" xml:space="preserve">
    <value>Time period between Ethereum HTTP requests for new job in solo mode, in milliseconds. Default value is 200ms</value>
  </data>
  <data name="ttClmCustomCommand" xml:space="preserve">
    <value>To change custom command click Extended parameters button</value>
  </data>
  <data name="ClmCfgShowWindow" xml:space="preserve">
    <value>Show miner window</value>
  </data>
  <data name="ClmCfgTabGPUSettings" xml:space="preserve">
    <value>GPU settings</value>
  </data>
  <data name="ClmCfgTabOtherSettings" xml:space="preserve">
    <value>Other settings</value>
  </data>
</root>